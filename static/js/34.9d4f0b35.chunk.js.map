{"version":3,"sources":["views/master-data/product/View.js","components/nkp-design/Table.js"],"names":["View","useState","data","setData","setShowModal","useEffect","_fetchData","a","datas","i","x","key","name","age","address","description","push","className","md","style","fontSize","display","width","marginLeft","type","placeholder","onChange","e","showRowNo","dataSource","dataTotal","length","rowKey","columns","title","dataIndex","align","filterAble","ellipsis","render","cell","row_accessible","onClick","RevelTable","props","state","pagination","current","pageSize","filters","this","setState","sorter","props_filters","forEach","item","undefined","Object","assign","filteredValue","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","ref","node","searchInput","value","target","onPressEnter","height","marginRight","verticalAlign","aria-hidden","filterIcon","filtered","color","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","row","index","fixed","setProps","overflow","scroll","size","loading","bordered","total","_setColumnsProps","_onChangeTable","minWidth","React","Component"],"mappings":"+XAgBe,SAASA,IAGtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAkBG,GAAlB,WAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAU,uCAAG,gCAAAC,EAAA,sDAEjB,IADIC,EAAQ,GACHC,EAAI,EAAGA,EAAI,IAAMA,IACpBC,EAAI,CACNC,IAAKF,EACLG,KAAM,aACNC,IAAK,GACLC,QAAS,2BACTC,YACE,iFAEJP,EAAMQ,KAAKN,GAEbP,EAAQK,GAbS,2CAAH,qDAgBhB,OACE,sBAAKS,UAAU,kBAAf,yBAEE,eAAC,IAAD,WACE,cAAC,IAAD,6DACA,cAAC,IAAD,CAAKA,UAAU,YAAf,SACE,cAAC,IAAD,CAAKC,GAAG,KAAR,SACE,sBAAMC,MAAO,CAAEC,SAAU,QAAzB,0FAMJ,cAAC,IAAD,CAAKH,UAAU,YAAYE,MAAO,CAAEC,SAAU,QAA9C,SACE,eAAC,IAAD,CAAKF,GAAG,KAAR,UACE,eAAC,IAAD,CAAWC,MAAO,CAAEE,QAAS,gBAA7B,UACE,cAAC,IAAD,iFACA,cAAC,IAAD,CACEF,MAAO,CACLG,MAAO,QACPD,QAAS,SACTE,WAAY,QAEdC,KAAK,OACLC,YAAY,kIAGhB,cAAC,IAAD,CAAWN,MAAO,CAAEE,QAAS,eAAgBE,WAAY,QAAzD,SACE,wBAAQN,UAAU,0BAAlB,8CAEF,cAAC,IAAD,CAAMA,UAAU,mCAAhB,qFAKJ,eAAC,IAAD,WACE,cAAC,IAAD,CACES,SAAU,SAACC,GAAD,OAAOrB,EAAWqB,IAC5BC,WAAW,EACXC,WAAY3B,EACZ4B,UAAW5B,EAAK6B,OAChBC,OAAO,MACPC,QAAS,CACP,CACEC,MAAO,OACPC,UAAW,OACXC,MAAO,SACPzB,IAAK,OACLW,MAAO,IACPe,YAAY,GAEd,CACEH,MAAO,MACPC,UAAW,MACXE,YAAY,EACZC,UAAU,EACV3B,IAAK,MACLyB,MAAO,UAET,CACEF,MAAO,WACPC,UAAW,UACXE,YAAY,EACZC,UAAU,EACVhB,MAAO,IACPX,IAAK,UACLyB,MAAO,UAET,CACEF,MAAO,cACPC,UAAW,cACXb,MAAO,IACPc,MAAO,SACPzB,IAAK,eAEP,CACEuB,MAAO,OACPC,UAAW,GACXC,MAAO,SACPd,MAAO,IACPX,IAAK,MACL4B,OAAQ,SAACC,GACP,IAAMC,EAAiB,GA8BvB,OA7BAA,EAAezB,KACb,cAAC,IAAD,CAEEQ,KAAK,SACLP,UAAU,4BACVyB,QAAS,kBAAMtC,GAAa,IAJ9B,iBACM,SAQRqC,EAAezB,KACb,cAAC,IAAD,CAEEQ,KAAK,SACLP,UAAU,4BAHZ,iBACM,SAORwB,EAAezB,KACb,cAAC,IAAD,CAEEQ,KAAK,SACLP,UAAU,2BACViB,MAAM,SAJR,mBACM,WAQDO,OAKf,cAAC,IAAD,CAAYxB,UAAU,aAAtB,SACE,cAAC,IAAD,kC,oKC7JS0B,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAY,CACRC,QAAS,EACTC,SAAU,IAEdC,QAAS,IAPE,E,qDAWnB,WACI,IAAQD,EAAcE,KAAKN,MAAnBI,SAERE,KAAKC,UAAS,SAAAN,GAGV,OAFAA,EAAMC,WAAWE,SAAWA,GAAY,GAEjC,CAAEF,WAAYD,EAAMC,iB,4BAInC,SAAeA,EAAYG,EAASG,GAAS,IAAD,OACxCF,KAAKC,SAAS,CACVL,WAAYA,EACZG,QAASA,IACV,WACC,IAAQA,EAAY,EAAKJ,MAAjBI,QACJI,EAAgB,GAEpB,EAAKT,MAAMX,QAAQqB,SAAQ,SAAAC,QACSC,IAA5BP,EAAQM,EAAKpB,YAAwD,OAA5Bc,EAAQM,EAAKpB,aAClDoB,EAAKlB,YAAcY,EAAQM,EAAKpB,WAAWJ,OAC3CsB,EAAcE,EAAKpB,WAAac,EAAQM,EAAKpB,WAAW,GAExDkB,EAAcE,EAAKpB,WAAac,EAAQM,EAAKpB,oBAK7BqB,IAAxB,EAAKZ,MAAMlB,UACX,EAAKkB,MAAMlB,SAAS,CAChBoB,WAAY,EAAKD,MAAMC,WACvBG,QAASI,EACTD,OAAQA,S,8BAMxB,WAAoB,IAAD,OACf,EAAgCF,KAAKL,MAA7BI,EAAR,EAAQA,QAASH,EAAjB,EAAiBA,WAEb,EAAyBI,KAAKN,MAA5BX,EAAN,EAAMA,QAASL,EAAf,EAAeA,UAHA,WAKNnB,GACDwB,EAAQxB,GAAG4B,WACXJ,EAAQxB,GAAKgD,OAAOC,OAAOzB,EAAQxB,GAAI,CACnCkD,cAAeV,EAAQhB,EAAQxB,GAAG0B,WAClCyB,eAAgB,gBAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,QAASC,EAA3C,EAA2CA,aAA3C,OACZ,sBAAK7C,MAAO,CAAE8C,QAAS,GAAvB,UACI,cAAC,IAAD,CACIC,IAAK,SAACC,GAAW,EAAKC,YAAcD,GACpC1C,YAAY,SACZ4C,MAAOP,EAAa,GACpBpC,SAAU,SAACC,GAAD,OAAOkC,EAAgBlC,EAAE2C,OAAOD,MAAQ,CAAC1C,EAAE2C,OAAOD,OAAS,KACrEE,aAAc,kBAAMR,KACpB5C,MAAO,CAAEG,MAAO,QAASD,QAAS,kBAEtC,yBAAQG,KAAK,SAASP,UAAU,yBAAyBE,MAAO,CAAEqD,OAAQ,GAAIC,YAAa,EAAGC,cAAe,OAAUhC,QAAS,kBAAMqB,KAAtI,UACI,mBAAG9C,UAAU,eAAe0D,cAAY,SAD5C,OAGA,yBAAQnD,KAAK,SAASP,UAAU,wBAAwBE,MAAO,CAAEqD,OAAQ,GAAIC,YAAa,EAAGC,cAAe,OAAUhC,QAAS,kBAAMsB,KAArI,UACI,mBAAG/C,UAAU,aAAa0D,cAAY,SAD1C,WAKRC,WAAY,SAACC,GAAD,OAAe,mBAAG5D,UAAU,6CAA6C0D,cAAY,OAAOxD,MAAO,CAAE2D,MAAOD,EAAW,eAAYrB,MAC/IuB,SAAU,SAACV,EAAOW,GAAR,OAAmBA,EAAO/C,EAAQxB,GAAG0B,WAAa6C,EAAO/C,EAAQxB,GAAG0B,WAAW8C,WAAWC,cAAcC,SAASd,EAAMa,eAAiB,IAClJE,8BAA+B,SAAAC,GACvBA,GAASC,YAAW,kBAAM,EAAKlB,YAAYmB,WAAU,aAGnC/B,IAAvBvB,EAAQxB,GAAGwC,SAAyBhB,EAAQxB,GAAGwC,QAAQlB,SAC9DE,EAAQxB,GAAKgD,OAAOC,OAAOzB,EAAQxB,GAAI,CACnCkD,cAAeV,EAAQhB,EAAQxB,GAAG0B,YAAc,KAChD4C,SAAU,SAACV,EAAOW,GACd,GAAIA,EAAO/C,EAAQxB,GAAG0B,WAAY,OAAO6C,EAAO/C,EAAQxB,GAAG0B,WAAWgD,SAASd,QAhC/F,IAAK,IAAI5D,KAAKwB,EAAU,EAAfxB,GAsCT,OAAImB,EACM,CACF,CACIM,MAAO,MACPK,OAAQ,SAACC,EAAMgD,EAAKC,GAAZ,OAAyB3C,EAAWC,QAAU,GAAKD,EAAWE,SAAYyC,EAAQ,GAC1FnE,MAAO,GACPc,MAAO,SACPsD,MAAO,SANf,mBAOUzD,IAGHA,I,oBAIf,WAAU,IAAD,OACC0D,EAAazC,KAAKN,MAAlB+C,SAEN,OACI,qBAAKxE,MAAO,CAAEyE,SAAU,QAAxB,SACI,cAAC,IAAD,aACIC,OAAQ,CAACnF,EAAE,MACXoF,KAAM5C,KAAKN,MAAMkD,MAAQ,QACzBC,QAAS7C,KAAKN,MAAMmD,UAAW,EAC/BC,SAAU9C,KAAKN,MAAMoD,WAAY,EACjCnE,WAAYqB,KAAKN,MAAMf,YAAc,GACrCiB,YAAuC,IAA1BI,KAAKN,MAAME,YAAX,2BAA+CI,KAAKL,MAAMC,YAA1D,IAAsEmD,MAAO/C,KAAKN,MAAMd,YACrGE,OAAQ,SAACwD,GAAD,OAASA,EAAI,EAAK5C,MAAMZ,SAChCC,QAASiB,KAAKgD,mBACdxE,SAAU,SAACoB,EAAYG,EAASG,GAAtB,OAAiC,EAAK+C,eAAerD,EAAYG,EAASG,IACpFjC,MAAO+B,KAAKN,MAAMzB,OAAS,CAAEiF,SAAU,MACnCT,U,GA5HgBU,IAAMC","file":"static/js/34.9d4f0b35.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Table from \"../../../components/nkp-design/Table\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Row,\n  Col,\n  FormGroup,\n  Input,\n  Label,\n  CardFooter,\n  Button,\n} from \"reactstrap\";\n//import ModalDetail from \"./ModalDetail\";\nexport default function View() {\n  /****************************Set State******************************************** */\n\n  const [data, setData] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    _fetchData();\n  }, []);\n  /****************************Set Function******************************************** */\n  const _fetchData = async () => {\n    let datas = [];\n    for (let i = 0; i < 1000; i++) {\n      let x = {\n        key: i,\n        name: \"John Brown\",\n        age: 32,\n        address: \"New York No. 1 Lake Park\",\n        description:\n          \"My name is John Brown, I am 32 years old, living in New York No. 1 Lake Park.\",\n      };\n      datas.push(x);\n    }\n    setData(datas);\n  };\n\n  return (\n    <div className=\"animated fadeIn\">\n      Product View\n      <Card>\n        <CardHeader>สินค้า / Product</CardHeader>\n        <Row className=\"mt-2 ml-3\">\n          <Col md=\"12\">\n            <span style={{ fontSize: \"26px\" }}>รายการสินค้า</span>\n            {/* <Link className=\"btn btn-success float-right mr-3\">\n              เพิ่มสินค้า\n            </Link> */}\n          </Col>\n        </Row>\n        <Row className=\"mt-3 ml-3\" style={{ fontSize: \"18px\" }}>\n          <Col md=\"12\">\n            <FormGroup style={{ display: \"inline-block\" }}>\n              <Label>ค้นหาสินค้า</Label>\n              <Input\n                style={{\n                  width: \"300px\",\n                  display: \"inline\",\n                  marginLeft: \"30px\",\n                }}\n                type=\"text\"\n                placeholder=\"รหัสสินค้า, ชื่อสินค้า\"\n              />\n            </FormGroup>\n            <FormGroup style={{ display: \"inline-block\", marginLeft: \"20px\" }}>\n              <button className=\"btn btn-primary btn-rad\">ค้นหา</button>\n            </FormGroup>\n            <Link className=\"btn btn-success float-right mr-3\">\n              เพิ่มสินค้า\n            </Link>\n          </Col>\n        </Row>\n        <CardBody>\n          <Table\n            onChange={(e) => _fetchData(e)}\n            showRowNo={true}\n            dataSource={data}\n            dataTotal={data.length}\n            rowKey=\"key\"\n            columns={[\n              {\n                title: \"name\",\n                dataIndex: \"name\",\n                align: \"center\",\n                key: \"name\",\n                width: 250,\n                filterAble: true,\n              },\n              {\n                title: \"age\",\n                dataIndex: \"age\",\n                filterAble: true,\n                ellipsis: true,\n                key: \"age\",\n                align: \"center\",\n              },\n              {\n                title: \"address \",\n                dataIndex: \"address\",\n                filterAble: true,\n                ellipsis: true,\n                width: 150,\n                key: \"address\",\n                align: \"center\",\n              },\n              {\n                title: \"description\",\n                dataIndex: \"description\",\n                width: 120,\n                align: \"center\",\n                key: \"description\",\n              },\n              {\n                title: \"Act.\",\n                dataIndex: \"\",\n                align: \"center\",\n                width: 150,\n                key: \"Act\",\n                render: (cell) => {\n                  const row_accessible = [];\n                  row_accessible.push(\n                    <Button\n                      key=\"view\"\n                      type=\"button\"\n                      className=\"icon-button color-primary\"\n                      onClick={() => setShowModal(true)}\n                    >\n                      view\n                    </Button>\n                  );\n                  row_accessible.push(\n                    <Button\n                      key=\"edit\"\n                      type=\"button\"\n                      className=\"icon-button color-warning\"\n                    >\n                      edit\n                    </Button>\n                  );\n                  row_accessible.push(\n                    <Button\n                      key=\"delete\"\n                      type=\"button\"\n                      className=\"icon-button color-danger\"\n                      title=\"delete\"\n                    >\n                      delete\n                    </Button>\n                  );\n                  return row_accessible;\n                },\n              },\n            ]}\n          />\n          <CardFooter className=\"text-muted\">\n            <Button>button</Button>\n          </CardFooter>\n        </CardBody>\n      </Card>\n      {/* <ModalDetail\n        show={showModal}\n        // data={{\n        //   keyword: this.state.search_product_spare_part,\n        //   product_code: this.state.product_spare_part_list.map(val => val.product_code),\n        // }}\n        // onRefresh={() => this.setState({ show_modal_product_spare_part: false, search_spare_part: \"\" })}\n        // onSave={this._addSetRowProductSparePart.bind(this)}\n        onClose={() => setShowModal(false)}\n      /> */}\n    </div>\n  );\n}\n","import React from 'react'\nimport { Table, Input, } from \"antd\"\n\nexport default class RevelTable extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            pagination: {\n                current: 1,\n                pageSize: 10,\n            },\n            filters: {},\n        }\n    }\n\n    componentDidMount() {\n        const { pageSize, } = this.props\n\n        this.setState(state => {\n            state.pagination.pageSize = pageSize || 10\n\n            return { pagination: state.pagination }\n        })\n    }\n\n    _onChangeTable(pagination, filters, sorter) {\n        this.setState({\n            pagination: pagination,\n            filters: filters,\n        }, () => {\n            const { filters } = this.state\n            let props_filters = {}\n\n            this.props.columns.forEach(item => {\n                if (filters[item.dataIndex] !== undefined && filters[item.dataIndex] !== null) {\n                    if (item.filterAble && filters[item.dataIndex].length) {\n                        props_filters[item.dataIndex] = filters[item.dataIndex][0]\n                    } else {\n                        props_filters[item.dataIndex] = filters[item.dataIndex]\n                    }\n                }\n            })\n\n            if (this.props.onChange !== undefined) {\n                this.props.onChange({\n                    pagination: this.state.pagination,\n                    filters: props_filters,\n                    sorter: sorter,\n                })\n            }\n        })\n    }\n\n    _setColumnsProps() {\n        const { filters, pagination } = this.state\n\n        var { columns, showRowNo } = this.props\n\n        for (let i in columns) {\n            if (columns[i].filterAble) {\n                columns[i] = Object.assign(columns[i], {\n                    filteredValue: filters[columns[i].dataIndex],\n                    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n                        <div style={{ padding: 6 }}>\n                            <Input\n                                ref={(node) => { this.searchInput = node }}\n                                placeholder=\"Search\"\n                                value={selectedKeys[0]}\n                                onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                                onPressEnter={() => confirm()}\n                                style={{ width: 'unset', display: \"inline-block\" }}\n                            />\n                            <button type=\"button\" className=\"btn btn-primary btn-sm\" style={{ height: 32, marginRight: 0, verticalAlign: \"top\", }} onClick={() => confirm()}>\n                                <i className=\"fa fa-search\" aria-hidden=\"true\"></i>S\n                            </button>\n                            <button type=\"button\" className=\"btn btn-danger btn-sm\" style={{ height: 32, marginRight: 0, verticalAlign: \"top\", }} onClick={() => clearFilters()}>\n                                <i className=\"fa fa-undo\" aria-hidden=\"true\"></i>C\n                            </button>\n                        </div>\n                    ),\n                    filterIcon: (filtered) => (<i className=\"ant-table-filter-trigger-icon fa fa-search\" aria-hidden=\"true\" style={{ color: filtered ? \"#1890ff\" : undefined, }} />),\n                    onFilter: (value, record) => record[columns[i].dataIndex] ? record[columns[i].dataIndex].toString().toLowerCase().includes(value.toLowerCase()) : '',\n                    onFilterDropdownVisibleChange: visible => {\n                        if (visible) setTimeout(() => this.searchInput.select(), 100)\n                    },\n                })\n            } else if (columns[i].filters !== undefined && columns[i].filters.length) {\n                columns[i] = Object.assign(columns[i], {\n                    filteredValue: filters[columns[i].dataIndex] || null,\n                    onFilter: (value, record) => {\n                        if (record[columns[i].dataIndex]) return record[columns[i].dataIndex].includes(value)\n                    },\n                })\n            }\n        }\n\n        if (showRowNo) {\n            return [\n                {\n                    title: \"No.\",\n                    render: (cell, row, index) => (((pagination.current - 1) * pagination.pageSize) + index + 1),\n                    width: 48,\n                    align: 'center',\n                    fixed: \"left\",\n                }, ...columns\n            ]\n        } else {\n            return columns\n        }\n    }\n\n    render() {\n        let { setProps } = this.props\n\n        return (\n            <div style={{ overflow: 'auto', }}>\n                <Table\n                    scroll={{x:1300}}\n                    size={this.props.size || 'small'}\n                    loading={this.props.loading || false}\n                    bordered={this.props.bordered || true}\n                    dataSource={this.props.dataSource || []}\n                    pagination={(this.props.pagination === false ? false : { ...this.state.pagination, total: this.props.dataTotal })}\n                    rowKey={(row) => row[this.props.rowKey]}\n                    columns={this._setColumnsProps()}\n                    onChange={(pagination, filters, sorter) => this._onChangeTable(pagination, filters, sorter)}\n                    style={this.props.style || { minWidth: 600, }}\n                    {...setProps}\n                />\n            </div>\n        )\n    }\n}\n\n\n"],"sourceRoot":""}