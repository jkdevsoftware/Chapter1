{"version":3,"sources":["components/nkp-design/chartSumAtt.js","views/Attandance/SummaryAtt.js","models/ManModel.js","models/SectionModel.js","components/nkp-design/CompSectionSl.js"],"names":["chart_model","ChartModel","AttModel","ChartSum","props","useState","loading","setLoading","labels","setLabels","dset","setDset","dset2","setDset2","line","setLine","llabels","ddset","ddset2","lline","useEffect","_fetchData","index","today","Date","mm","String","getMonth","padStart","a","getChartAct","dp_id","cell_id","celli","post_id","posti","shi_id","shift","month","result","getLineAct","result2","i","length","push","dd","present","absent","percented","Loading","show","name","color","style","fontSize","m_name","name_cell","name_post","name_shi","options","responsive","plugins","scales","y","type","display","position","beginAtZero","max","title","text","grid","y2","data","datasets","label","borderColor","backgroundColor","yAxisID","stack","man_model","ManModel","Summary","chartSum","trigger","dept","name_c","name_p","cell","post","shi","chart","setChart","selects3","option","id","valmax","selected","selects","setSelects","po_id","po_name","selects2","setSelects2","section","cl_id","cl_name","setSelects3","_getSection","e","getSection","_getChart","_clearChart","getPosition","lg","width","value","onChange","val","map","Option","Button","className","float","onClick","this","directFetch","url","method","body","JSON","stringify","mathod","BaseModel","SectionModel"],"mappings":"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","file":"static/js/24.833d2e13.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Bar, Line, Scatter } from 'react-chartjs-2';\r\nimport Loading from \"./Loading\";\r\nimport AttModel from '../../models/AttendenceModel';\r\nimport { Tag } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport ChartModel from 'src/models/ChartModel.js';\r\n\r\nconst chart_model = new ChartModel();\r\n\r\nconst att_model = new AttModel();\r\n\r\nexport default function ChartSum(props) {\r\n    // const [data, setData] = useState([]);\r\n    // const [data2, setData2] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [labels, setLabels] = useState([]);\r\n    const [dset, setDset] = useState([]);\r\n    const [dset2, setDset2] = useState([]);\r\n    const [line, setLine] = useState([]);\r\n    //console.log(\"props show :\", props);\r\n    let llabels = [];\r\n    let ddset = [];\r\n    let ddset2 = [];\r\n    let lline = [];\r\n    let dname = \"\";\r\n\r\n    useEffect(() => {\r\n\r\n        _fetchData();\r\n        //console.log('this');\r\n    }, [props]);\r\n\r\n    const id = props.index\r\n    var today = new Date();\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0');\r\n    const _fetchData = async () => {\r\n        setLoading(true);\r\n        const check = props.index;\r\n\r\n        //console.log(\"check:\", props);\r\n        //console.log(\"propsp:\",props.show);\r\n        // if (props.show == false) {\r\n        const result = await chart_model.getChartAct({\r\n            dp_id: props.index,\r\n            cell_id: props.celli,\r\n            post_id: props.posti,\r\n            shi_id: props.shift,\r\n            month: props.month ===\"\"? mm: props.month,\r\n        });\r\n\r\n        //console.log(\"result:\",result);\r\n        const result2 = await chart_model.getLineAct({\r\n            dp_id: props.index,\r\n            cell_id: props.celli,\r\n            post_id: props.posti,\r\n            shi_id: props.shift,\r\n            month:  props.month ===\"\"? mm: props.month,\r\n        });\r\n\r\n\r\n        for (var i = 0; i < result.length; i++) {\r\n\r\n            llabels.push(result[i].dd);\r\n            ddset.push(result[i].present);\r\n            ddset2.push(result[i].absent);\r\n            lline.push(result2[i].percented);\r\n        }\r\n\r\n        setLabels(llabels);\r\n        setDset(ddset);\r\n        setDset2(ddset2);\r\n        setLine(lline);\r\n        //console.log(labels);\r\n\r\n        setLoading(false);\r\n        //console.log(line);\r\n    };\r\n\r\n    const _checkFetch = async () => {\r\n        if (dname == \"\") {\r\n            dname = props.name;\r\n            await _fetchData();\r\n            console.log(\"dname:\", dname);\r\n        }\r\n        else {\r\n            if (dname != props.name) {\r\n                await _fetchData();\r\n                console.log(\"dname:\", dname);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* {console.log(\"props :\",props)} */}\r\n            <Loading show={loading} />\r\n            {props.name === \"\" ? <div></div> : <Tag color=\"#2db7f5\" style={{ fontSize: \"18px\" }}>Dept : {props.name}</Tag>}\r\n            {props.m_name === \"\" ? <div></div> : <Tag color=\"#ff7f50\" style={{ fontSize: \"18px\" }}>Month : {props.m_name}</Tag>}\r\n            {props.name_cell === \"\" ? <div></div> : <Tag color=\"#218732\" style={{ fontSize: \"18px\" }}>Section : {props.name_cell}</Tag>}\r\n            {props.name_post === \"\" ? <div></div> : <Tag color=\"#ff5000\" style={{ fontSize: \"18px\" }}>Position : {props.name_post}</Tag>}\r\n            {props.name_shi === \"\" ? <div></div> : <Tag color=\"#dac5f7\" style={{ fontSize: \"18px\" }}>Shift : {props.name_shi}</Tag>}\r\n            <Scatter\r\n                //hidden={props.show}\r\n                options={{\r\n                    responsive: true,\r\n                    plugins: {\r\n                        // legend: {\r\n                        //     position: 'bottom'\r\n                        // }\r\n                    },\r\n                    scales: {\r\n\r\n                        y: {\r\n                            type: 'linear',\r\n                            display: true,\r\n                            position: 'left',\r\n                            beginAtZero: true,\r\n                            max: props.max,\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Actual (ea.)'\r\n                            },\r\n                            grid: {\r\n                                display: false\r\n                            }\r\n                        },\r\n                        y2: {\r\n                            type: 'linear',\r\n                            display: true,\r\n                            position: 'right',\r\n                            beginAtZero: true,\r\n                            max: 110,\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Percent (%)'\r\n                            }\r\n\r\n                        },\r\n\r\n                    },\r\n\r\n\r\n                }}\r\n                data={{\r\n                    labels: labels,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Actual Percent',\r\n                            data: line,\r\n                            type: 'line',\r\n                            borderColor: \"blue\",\r\n                            backgroundColor: \"blue\",\r\n                            yAxisID: 'y2'\r\n\r\n                        },\r\n                        {\r\n                            label: 'Present',\r\n                            data: dset,\r\n                            borderColor: 'rgb(11, 218, 81)',\r\n                            backgroundColor: 'rgba(11, 218, 81, 0.5)',\r\n                            stack: 'Stack 0',\r\n                            type: 'bar'\r\n                            // yAxisID:'y'\r\n                        },\r\n                        {\r\n                            label: 'Absent',\r\n                            data: dset2,\r\n                            borderColor: 'rgb(255, 99, 132)',\r\n                            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n                            stack: 'Stack 0',\r\n                            type: 'bar'\r\n                            //yAxisID:'y'\r\n                        },\r\n\r\n                    ],\r\n\r\n                }}\r\n\r\n\r\n\r\n            />\r\n\r\n        </div>\r\n    )\r\n}","import { CCard, CCardHeader, CCol, CRow, CCardBody } from '@coreui/react'\r\nimport React, { lazy, useState, useEffect } from 'react'\r\nimport MainChartExample from '../charts/MainChartExample.js'\r\nimport { Bar, Line, Scatter } from 'react-chartjs-2';\r\nimport { Label } from 'reactstrap';\r\nimport { Select, Switch } from 'antd';\r\nimport { Button } from 'react-bootstrap'\r\nimport { plugins } from 'chart.js';\r\nimport ChartSum from '../../components/nkp-design/chartSumAtt'\r\n\r\nimport SectionSelect from '../../components/nkp-design/CompSectionSl'\r\n\r\nimport ManModel from 'src/models/ManModel.js';\r\nimport ChartModel from 'src/models/ChartModel';\r\nconst man_model = new ManModel();\r\nconst chart_model = new ChartModel();\r\n\r\nexport default function Summary() {\r\n\r\n\r\n    const [chart, setChart] = useState({\r\n        chartSum: {\r\n            trigger: true,\r\n            data: {\r\n                dept: 1,\r\n                name: \"\",\r\n                max: 20,\r\n                name_c: \"\",\r\n                name_p: \"\",\r\n                name_shi: \"\",\r\n                cell: \"\",\r\n                post: \"\",\r\n                shi: \"\",\r\n                month: \"\",\r\n                m_name: \"\",\r\n            },\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        _fetchData();\r\n    }, [selects3]);\r\n\r\n    const [selects, setSelects] = useState({\r\n        dept: {\r\n            option: [\r\n                { id: 1, name: \"NKP\", valmax: 20 },\r\n                { id: 2, name: \"PCBA\", valmax: 250 },\r\n                { id: 3, name: \"PMD\", valmax: 250 },\r\n                { id: 4, name: \"IMO\", valmax: 250 },\r\n                { id: 5, name: \"IAD\", valmax: 20 },\r\n            ],\r\n            selected: \"\",\r\n        },\r\n        month: {\r\n            option: [\r\n\r\n                { id: \"1\", name: \"January\" },\r\n                { id: \"2\", name: \"February\" },\r\n                { id: \"3\", name: \"March\" },\r\n                { id: \"4\", name: \"April\" },\r\n                { id: \"5\", name: \"May\" },\r\n                { id: \"6\", name: \"June\" },\r\n                { id: \"7\", name: \"July\" },\r\n                { id: \"8\", name: \"August\" },\r\n                { id: \"9\", name: \"September\" },\r\n                { id: \"10\", name: \"Octorber\" },\r\n                { id: \"11\", name: \"November\" },\r\n                { id: \"12\", name: \"December\" },\r\n            ],\r\n            selected: \"\",\r\n        },\r\n        shift: {\r\n            option: [{ id: 1, name: \"Day\" },\r\n            { id: 2, name: \"Night\" },\r\n            { id: 3, name: \"A\" },\r\n            { id: 4, name: \"B\" },\r\n            { id: 5, name: \"TEAM A\" },\r\n            { id: 6, name: \"TEAM B\" },\r\n            { id: 7, name: \"TEAM C\" },\r\n            ],\r\n            selected: \"\"\r\n        },\r\n\r\n    });\r\n\r\n    const [selects2, setSelects2] = useState({\r\n        position: {\r\n            option: [{ po_id: 0, po_name: \"\" }],\r\n            selected: \"\",\r\n        }\r\n    });\r\n\r\n    const [selects3, setSelects3] = useState({\r\n        section: {\r\n            option: [{ cl_id: 0, cl_name: \"\" },],\r\n            selected: \"\",\r\n        }\r\n    });\r\n\r\n    const _getSection = async (e) => {\r\n\r\n        const dp = e === \"\" ? 0 : e;\r\n        //console.log(\"check dp :\",dp);\r\n\r\n        let result = null;\r\n        // if(dp == 0)\r\n        // {\r\n        result = await chart_model.getSection();\r\n\r\n        setSelects3({\r\n            ...selects3,\r\n            section: { ...selects3.section, option: result }\r\n        });\r\n        // }\r\n        // else{\r\n        //     result = await chart_model.getSectionByDept({\r\n        //         dp_id: 1,\r\n        //     });\r\n        //     console.log(\"check: \",result);\r\n        //     setSelects3({\r\n        //         ...selects3,\r\n        //         section: { ...selects3.section, option: result }\r\n        //     });\r\n        // }\r\n\r\n        //   console.log(\"check : \",result);\r\n\r\n    };\r\n\r\n    const _getChart = async () => {\r\n        setChart({\r\n            chartSum: {\r\n                trigger: false,\r\n                data: {\r\n                    dept: selects.dept.selected === \"\" ? 1 : selects.dept.option[selects.dept.selected - 1].id,\r\n                    name: selects.dept.selected === \"\" ? \"NKP\" : selects.dept.option[selects.dept.selected - 1].name,\r\n                    max: selects.dept.selected === \"\" ? 20 : selects.dept.option[selects.dept.selected - 1].valmax,\r\n                    name_c: selects3.section.selected === \"\" ? \"\" : selects3.section.option[selects3.section.selected - 1].cl_name,\r\n                    name_p: selects2.position.selected === \"\" ? \"\" : selects2.position.option[selects2.position.selected - 1].po_name,\r\n                    name_shi: selects.shift.selected === \"\" ? \"\" : selects.shift.option[selects.shift.selected - 1].name,\r\n                    cell: selects3.section.selected === \"\" ? \"\" : selects3.section.option[selects3.section.selected - 1].cl_id,\r\n                    post: selects2.position.selected === \"\" ? \"\" : selects2.position.option[selects2.position.selected - 1].po_id,\r\n                    shi: selects.shift.selected === \"\" ? \"\" : selects.shift.option[selects.shift.selected - 1].id,\r\n                    month: selects.month.selected === \"\" ? \"\" : selects.month.option[selects.month.selected - 1].id,\r\n                    m_name: selects.month.selected === \"\" ? \"\" : selects.month.option[selects.month.selected - 1].name,\r\n                }\r\n            }\r\n        });\r\n        //console.log(\"set id :\",chart.chartSum.data.dept);\r\n    };\r\n\r\n    const [value, setValue] = useState({\r\n        id: \"\",\r\n        name: \"\",\r\n    });\r\n\r\n    const _setSection = async (e, n) => {\r\n        setValue({\r\n            id: e,\r\n            name: n,\r\n        });\r\n        console.log(\"check: \", e, n);\r\n    }\r\n\r\n    const _clearChart = async () => {\r\n        setChart({\r\n            chartSum: {\r\n                data: {\r\n                    dept: 1,\r\n                    name: \"\",\r\n                    max: 20,\r\n                    name_c: \"\",\r\n                    name_p: \"\",\r\n                    name_shi: \"\",\r\n                    cell: \"\",\r\n                    post: \"\",\r\n                    shi: \"\",\r\n                    month: \"\",\r\n                    m_name: \"\",\r\n                },\r\n            }\r\n        });\r\n\r\n        setSelects({\r\n            ...selects,\r\n            shift: { ...selects.shift, selected: \"\" },\r\n        });\r\n\r\n        setSelects3({\r\n            ...selects3,\r\n            section: { ...selects3.section, selected: \"\" },\r\n        });\r\n\r\n        setSelects2({\r\n            ...selects2,\r\n            position: { ...selects2.position, selected: \"\" },\r\n        });\r\n        //console.log(\"set show :\",chart.chartSum.data.dept);\r\n    };\r\n\r\n\r\n    const _fetchData = async () => {\r\n        //console.log(\"check dp+id:\",selects.dept.selected === \"\" ? \"0\" : selects.dept.option[selects.dept.selected - 1].id);\r\n\r\n        await _getSection(\"\");\r\n\r\n        const result2 = await man_model.getPosition();\r\n        setSelects2({\r\n            ...selects2,\r\n            position: { ...selects2.position, option: result2 }\r\n        });\r\n\r\n\r\n\r\n    };\r\n\r\n    return (\r\n\r\n        <CCard>\r\n            {/* {console.log(selects.section.option)} */}\r\n            <CCardHeader>\r\n                <h4>Summary</h4>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n                <CRow>\r\n                    <CCol lg=\"12\">\r\n                        <CCard>\r\n                            <CCardBody>\r\n                                <CRow>\r\n                                    <CCol lg=\"1\">\r\n                                        <label>Dept:</label>\r\n                                    </CCol>\r\n                                    <CCol lg=\"2\">\r\n                                        <Select\r\n                                            style={{ width: \"130px\" }}\r\n                                            value={\r\n                                                selects.dept.selected === \"\"\r\n                                                    ? selects.dept.option[0].name\r\n                                                    : selects.dept.option[selects.dept.selected - 1].name\r\n                                            }\r\n                                            onChange={(val) => {\r\n\r\n                                                setSelects({\r\n                                                    ...selects,\r\n                                                    dept: { ...selects.dept, selected: val },\r\n                                                });\r\n                                                _getSection(val);\r\n\r\n                                            }\r\n                                            }\r\n\r\n                                        >\r\n                                            {selects.dept.option.map((data) => (\r\n                                                <Select.Option key={data.id}>\r\n                                                    {data.name}\r\n                                                </Select.Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </CCol>\r\n                                    <CCol lg=\"1\">\r\n                                        <label>Section:</label>\r\n                                    </CCol>\r\n                                    <CCol lg=\"2\">\r\n                                        <Select\r\n                                            style={{ width: \"130px\" }}\r\n                                            value={\r\n                                                selects3.section.selected === \"\"\r\n                                                    ? selects3.section.option[0].cl_name\r\n                                                    : selects3.section.option[selects3.section.selected - 1].cl_name\r\n                                            }\r\n                                            onChange={(val) => {\r\n\r\n                                                setSelects3({\r\n                                                    ...selects3,\r\n                                                    section: { ...selects3.section, selected: val },\r\n                                                });\r\n                                            }\r\n                                            }\r\n\r\n                                        >\r\n                                            {selects3.section.option.map((data) => (\r\n                                                <Select.Option key={data.cl_id}>\r\n                                                    {data.cl_name}\r\n                                                </Select.Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                        {/* <SectionSelect\r\n                                            dp_id={selects.dept.selected === \"\" ? 0 : selects.dept.option[selects.dept.selected - 1].id}\r\n                                            onChange={() => _setSection()}\r\n                                        /> */}\r\n                                    </CCol>\r\n                                    <CCol lg=\"1\">\r\n                                        <label>Shift:</label>\r\n                                    </CCol>\r\n                                    <CCol lg=\"2\">\r\n                                        <Select\r\n                                            style={{ width: \"130px\" }}\r\n                                            value={\r\n                                                selects.shift.selected === \"\"\r\n                                                    ? selects.shift.option[0].name\r\n                                                    : selects.shift.option[selects.shift.selected - 1].name\r\n                                            }\r\n                                            onChange={(val) => {\r\n\r\n                                                setSelects({\r\n                                                    ...selects,\r\n                                                    shift: { ...selects.shift, selected: val },\r\n                                                });\r\n                                            }\r\n                                            }\r\n\r\n                                        >\r\n                                            {selects.shift.option.map((data) => (\r\n                                                <Select.Option key={data.id}>\r\n                                                    {data.name}\r\n                                                </Select.Option>\r\n                                            ))}\r\n                                        </Select>\r\n\r\n                                    </CCol>\r\n                                    <CCol lg=\"1\">\r\n                                        <label>Position:</label>\r\n                                    </CCol>\r\n                                    <CCol lg=\"2\">\r\n                                        <Select\r\n                                            style={{ width: \"130px\" }}\r\n                                            value={\r\n                                                selects2.position.selected === \"\"\r\n                                                    ? selects2.position.option[0].po_name\r\n                                                    : selects2.position.option[selects2.position.selected - 1].po_name\r\n                                            }\r\n                                            onChange={(val) => {\r\n\r\n                                                setSelects2({\r\n                                                    ...selects2,\r\n                                                    position: { ...selects2.position, selected: val },\r\n                                                });\r\n                                            }\r\n                                            }\r\n\r\n                                        >\r\n                                            {selects2.position.option.map((data) => (\r\n                                                <Select.Option key={data.po_id}>\r\n                                                    {data.po_name}\r\n                                                </Select.Option>\r\n                                            ))}\r\n                                        </Select>\r\n\r\n                                    </CCol>\r\n\r\n                                    {/* <CCol lg=\"2\">\r\n                                        <Button\r\n                                            className=\"btn btn-danger\"\r\n                                            style={{ width: \"100px\" }}\r\n                                            onClick={() => _clearChart()}\r\n                                        >\r\n                                            Clear\r\n                                        </Button>\r\n                                    </CCol> */}\r\n                                </CRow>\r\n                                <br />\r\n                                <CRow>\r\n                                    <CCol lg=\"1\">\r\n                                        <label>Month:</label>\r\n                                    </CCol>\r\n                                    <CCol lg=\"2\">\r\n                                        <Select\r\n                                            style={{ width: \"500px\" }}\r\n                                            value={\r\n                                                selects.month.selected === \"\"\r\n                                                    ? selects.month.option[0].name\r\n                                                    : selects.month.option[selects.month.selected - 1].name\r\n                                            }\r\n                                            onChange={(val) => {\r\n\r\n                                                setSelects({\r\n                                                    ...selects,\r\n                                                    month: { ...selects.month, selected: val },\r\n                                                });\r\n                                            }\r\n                                            }\r\n                                        >\r\n                                            {selects.month.option.map((data) => (\r\n                                                <Select.Option key={data.id}>\r\n                                                    {data.name}\r\n                                                </Select.Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </CCol>\r\n                                    <CCol lg=\"6\">\r\n\r\n                                    </CCol>\r\n                                    <CCol lg=\"1\" >\r\n\r\n                                        <Button\r\n                                            className=\"btn btn-primary\"\r\n                                            style={{ width: \"80px\", float: \"left\" }}\r\n                                            onClick={() => _getChart()}\r\n                                        >Set</Button>\r\n                                    </CCol>\r\n                                    <CCol lg=\"1\"></CCol>\r\n                                    <CCol lg=\"1\" >\r\n\r\n                                        <Button\r\n                                            className=\"btn btn-danger\"\r\n                                            style={{ width: \"80px\", float: \"right\" }}\r\n                                            onClick={() => _clearChart()}\r\n                                        >Clear</Button>\r\n                                    </CCol>\r\n                                </CRow>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    </CCol>\r\n                </CRow>\r\n                <CRow>\r\n                    <CCol lg=\"12\">\r\n                        <CCard>\r\n                            {/* <CCardHeader><label>Chart</label></CCardHeader> */}\r\n                            <CCardBody>\r\n\r\n                                <ChartSum\r\n                                    index={chart.chartSum.data.dept === 1 ? 1 : chart.chartSum.data.dept}\r\n                                    posti={chart.chartSum.data.post === \"\" ? \"\" : chart.chartSum.data.post}\r\n                                    celli={chart.chartSum.data.cell === \"\" ? \"\" : chart.chartSum.data.cell}\r\n                                    shift={chart.chartSum.data.shi === \"\" ? \"\" : chart.chartSum.data.shi}\r\n                                    name_post={chart.chartSum.data.name_p === \"\" ? \"\" : chart.chartSum.data.name_p}\r\n                                    name_cell={chart.chartSum.data.name_c === \"\" ? \"\" : chart.chartSum.data.name_c}\r\n                                    name_shi={chart.chartSum.data.name_shi === \"\" ? \"\" : chart.chartSum.data.name_shi}\r\n                                    name={chart.chartSum.data.name === \"\" ? \"NKP\" : chart.chartSum.data.name}\r\n                                    max={chart.chartSum.data.max == \"\" ? 20 : chart.chartSum.data.max}\r\n                                    month={chart.chartSum.data.month === \"\" ? \"\" : chart.chartSum.data.month}\r\n                                    m_name={chart.chartSum.data.m_name === \"\" ? \"\" : chart.chartSum.data.m_name}\r\n\r\n                                //show={chart.chartSum.trigger}\r\n                                />\r\n\r\n\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    </CCol>\r\n                </CRow>\r\n            </CCardBody>\r\n\r\n\r\n        </CCard>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\n","import { BaseModel } from \"./MainModel\";\r\n\r\nexport default class ManModel extends BaseModel {\r\n\r\n    async getMan(data) {\r\n        return this.directFetch({\r\n            url: \"Man\",\r\n            method: \"POST\",\r\n            body: JSON.stringify(data),\r\n        });\r\n    }\r\n\r\n    async getManById(data) {\r\n        return this.directFetch({\r\n            url: \"ManDetail\",\r\n            method: \"POST\",\r\n            body: JSON.stringify(data),\r\n        });\r\n    }\r\n\r\n    async getManBySearch(data) {\r\n        return this.directFetch({\r\n            url: \"SearchMan\",\r\n            method: \"POST\",\r\n            body: JSON.stringify(data),\r\n        });\r\n    }\r\n\r\n    async insertManDetail(data) {\r\n        this.directFetch({\r\n            url: \"InsertMan\",\r\n            method: \"POST\",\r\n            body: JSON.stringify(data),\r\n        });\r\n    }\r\n\r\n    async updateManDetail(data) {\r\n        //console.log(\"update:\",data);\r\n        this.directFetch({\r\n            url: \"UpdateMan\",\r\n            method: \"POST\",\r\n            body: JSON.stringify(data),\r\n        });\r\n    }\r\n\r\n    async resignMan(data) {\r\n        this.directFetch({\r\n            url: \"ResignMan\",\r\n            method: \"POST\",\r\n            body: JSON.stringify(data),\r\n        });\r\n    }\r\n\r\n    async getResignMan() {\r\n        return this.directFetch({\r\n            url: \"ManRe\",\r\n            mathod: \"GET\",\r\n        });\r\n    }\r\n\r\n \r\n\r\n    async getPosition(){\r\n        return this.directFetch({\r\n            url: \"GetPosition\",\r\n            mathod: \"GET\",\r\n           // body: JSON.stringify(data),\r\n        });\r\n    }\r\n\r\n   \r\n\r\n}","import { BaseModel } from \"./MainModel\";\r\n\r\nexport default class SectionModel extends BaseModel {\r\n\r\n    async getSectionNKP(){\r\n        //console.log(\"data:\",data);\r\n        return this.directFetch({\r\n            url: \"GetSectionNKP\",\r\n            mathod: \"GET\",\r\n            //body: JSON.stringify(data),\r\n        });\r\n    }\r\n    async getSectionPCBA(){\r\n        //console.log(\"data:\",data);\r\n        return this.directFetch({\r\n            url: \"GetSectionPCBA\",\r\n            mathod: \"GET\",\r\n            //body: JSON.stringify(data),\r\n        });\r\n    }\r\n    async getSectionPMD(){\r\n        //console.log(\"data:\",data);\r\n        return this.directFetch({\r\n            url: \"GetSectionPMD\",\r\n            mathod: \"GET\",\r\n            //body: JSON.stringify(data),\r\n        });\r\n    }\r\n    async getSectionIMO(){\r\n        //console.log(\"data:\",data);\r\n        return this.directFetch({\r\n            url: \"GetSectionIMO\",\r\n            mathod: \"GET\",\r\n            //body: JSON.stringify(data),\r\n        });\r\n    }\r\n    async getSectionIAD(){\r\n        //console.log(\"data:\",data);\r\n        return this.directFetch({\r\n            url: \"GetSectionIAD\",\r\n            mathod: \"GET\",\r\n            //body: JSON.stringify(data),\r\n        });\r\n    }\r\n\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Select } from 'antd';\r\n\r\nimport SectionModel from \"src/models/SectionModel\";\r\nimport ChartModel from 'src/models/ChartModel.js';\r\n\r\nconst chart_model = new ChartModel();\r\nconst sec_model = new SectionModel();\r\nexport default function SectionSelect(props) {\r\n\r\n    useEffect(() => {\r\n        _fetchData();\r\n    }, [props]);\r\n\r\n\r\n    const [selects, setSelects] = useState({\r\n        section: {\r\n            option: [{ cl_id: 0, cl_name: \"\" },],\r\n            selected: \"\",\r\n        },\r\n    });\r\n\r\n    const _fetchData = async () => {\r\n\r\n        let result = null;\r\n\r\n        if (props.dp_id == 1) {\r\n            result = await sec_model.getSectionNKP();\r\n        }\r\n        else if (props.dp_id == 2) {\r\n            result = await sec_model.getSectionPCBA();\r\n        }\r\n        else if (props.dp_id == 3) {\r\n            result = await sec_model.getSectionPMD();\r\n        }\r\n        else if (props.dp_id == 4) {\r\n            result = await sec_model.getSectionIMO();\r\n        }\r\n        else if (props.dp_id == 5) {\r\n            result = await sec_model.getSectionIAD();\r\n        }\r\n        else {\r\n            result = await chart_model.getSection();\r\n        }\r\n\r\n        // const result = await chart_model.getSectionByDept({\r\n        //     dp_id: 1\r\n        // });\r\n        console.log(\"check : \", result);\r\n        setSelects({\r\n            ...selects,\r\n            section: { ...selects.section, option: result }\r\n        });\r\n\r\n    };\r\n\r\n    const hadleChangeVal = () => {\r\n\r\n        var e = selects.section.selected === \"\" ? 1 : selects.section.option[selects.section.selected - 1].cl_id;\r\n        var n = selects.section.selected === \"\" ? \"\" : selects.section.option[selects.section.selected - 1].cl_name;\r\n        this.props.onChange(e,n);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Select\r\n                style={{ width: \"130px\" }}\r\n                value={\r\n                    selects.section.selected === \"\"\r\n                        ? selects.section.option[0].cl_name\r\n                        : selects.section.option[selects.section.selected].cl_name\r\n                }\r\n                onChange={(val) => {\r\n\r\n                    setSelects({\r\n                        ...selects,\r\n                        section: { ...selects.section, selected: val },\r\n                    });\r\n                    hadleChangeVal();\r\n\r\n                }\r\n                }\r\n\r\n            >\r\n                {selects.section.option.map((data) => (\r\n                    <Select.Option key={data.cl_id}>\r\n                        {data.cl_name}\r\n                    </Select.Option>\r\n                ))}\r\n            </Select>\r\n        </>\r\n    )\r\n\r\n\r\n}"],"sourceRoot":""}